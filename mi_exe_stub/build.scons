# Copyright 2008-2009 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

Import('env')

# Build subdirectories before switching to use WDK
env.BuildSConscript('x86_encoder')

# Build at warning level 4.
env.FilterOut(CCFLAGS=['/W3'])
env.Append(
    CCFLAGS = [
        '/W4',
        '/Wall',
    ],
)

def _UseWdkCrt(env):
  env.Prepend(
      WDK_PATH = '$GOOGLECLIENT/third_party/windows_driver_kit_vc80/files',
      CPPPATH = [
          '$WDK_PATH/inc/api/crt/stl70',
          '$WDK_PATH/inc/crt',
          '$WDK_PATH/inc/crt/atl71',
      ],
      LIBPATH = [
          '$WDK_PATH/lib/atl/i386',
          '$WDK_PATH/lib/crt/i386',
      ],
  )
  # Magic for STL to work. Note that even though we're using ATL, a few things
  # from STL are still required to correctly build, e.g. the iosfwd header.
  env.Append(
      CPPDEFINES = [
          '_CRT_SECURE_NO_WARNINGS',
          '_STATIC_CPPLIB',   # Taken from WDK makefile.
          '_STL70_',          # Taken from WDK makefile.
          # Prefer ATL CRT replacements to system CRT. This makes a big
          # difference on calls to CStringT::Format style functions--in testing,
          # I measured a 5 KiB difference.
          '_ATL_MIN_CRT',
          '_ATL_CSTRING_NO_CRT',
      ],
      CCFLAGS = [
          '/D_SECURE_SCL=0',
          '/EHsc',
          '/FI$MAIN_DIR/mi_exe_stub/ptrdiff_t.h',
          '/wd4068',  # unknown pragma (ATL uses PreFAST pragmas)
      ],
  )
  env.FilterOut(
      CPPDEFINES = [
          'NOMINMAX',
      ],
      CCFLAGS = [
          '/D_HAS_EXCEPTIONS=0',
          '/RTC1',
      ],
  )

for omaha_version_info in env['omaha_versions_info']:
  prefix = omaha_version_info.filename_prefix
  temp_env = env.Clone()

  if prefix == 'TEST_':
    temp_env['OBJPREFIX'] = temp_env.subst('test/$OBJPREFIX')
  elif prefix:
    raise Exception('ERROR: Unrecognized prefix "%s"' % prefix)

  temp_env.Append(
      LIBS = [
          'lzma',
          'mi_exe_stub_lib',
          ('atls', 'atlsd')[temp_env.Bit('debug')],
          ('msvcrt', 'libcmtd')[temp_env.Bit('debug')],
          ('msvcprt', 'libcpmtd')[temp_env.Bit('debug')],
          # 'msvcprt_btowc.lib',
          # 'ntstc_msvcrt',  # Only required if STL classes are used.
          'shlwapi',
          'version',
          ],
      RCFLAGS = [
          '/DVERSION_MAJOR=%d' % omaha_version_info.version_major,
          '/DVERSION_MINOR=%d' % omaha_version_info.version_minor,
          '/DVERSION_BUILD=%d' % omaha_version_info.version_build,
          '/DVERSION_PATCH=%d' % omaha_version_info.version_patch,
          '/DVERSION_NUMBER_STRING=\\"%s\\"' % (
              omaha_version_info.GetVersionString()),
          '/DLANGUAGE_STRING=\\"%s\\"' % 'en'
          ],

      # This avoids missing __load_config_used
      LINKFLAGS = [
          '/SAFESEH:NO'
          ],
  )


  exe_inputs = temp_env.RES(
      target=prefix + 'mi.res',
      source=[
          'mi.rc',
      ],
  )

  # Force a rebuild when the version changes.
  temp_env.Depends(exe_inputs, '$MAIN_DIR/VERSION')

  for language in omaha_version_info.GetSupportedLanguages():
    base_name = 'mi_generated_resources_' + language
    exe_inputs += temp_env.RES(
        target=prefix + base_name + '.res',
        source=base_name + '.rc',
    )

  if not temp_env.Bit('debug'):
    # Stubs for W2k compatibility.
    exe_inputs += '$WDK_PATH/lib/w2k/i386/msvcrt_win2000.obj',

  temp_env.ComponentProgram(
      prog_name = prefix + 'mi_exe_stub',
      source = exe_inputs,
  )


local_env = env.Clone()

# Avoid target conflicts over extractor.obj
local_env['OBJSUFFIX'] = '_mi' + local_env['OBJSUFFIX']

local_inputs = [
    'mi.cc',
    'process.cc',
    'tar.cc',
    '../base/extractor.cc',
]

# Precompiled headers cannot be used because debug builds must link against
# base.lib due to base/ inclusions in precompile.h.
local_env.ComponentStaticLibrary('mi_exe_stub_lib',
                                 local_inputs,
                                 use_pch_default=False)
