#!/usr/bin/python2.4
#
# Copyright 2009 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================


Import('env')


_first = True
for v in env['product_version']:
  temp_env = env.Clone(COMPONENT_STATIC = False)

  if _first:
    _first = False
    prefix = ''
  else:
    prefix = 'TEST_'
    temp_env['OBJPREFIX'] = temp_env['OBJPREFIX'] + 'test/'

  version_string = '%d.%d.%d.%d' % (v[0], v[1], v[2], v[3])

  temp_env.Append(
      RCFLAGS = [
          '/DVERSION_MAJOR=%d' % v[0],
          '/DVERSION_MINOR=%d' % v[1],
          '/DVERSION_BUILD=%d' % v[2],
          '/DVERSION_PATCH=%d' % v[3],
          '/DVERSION_NUMBER_STRING=\\"%s\\"' % version_string,
          ],

      CPPDEFINES = [
          '_ATL_APARTMENT_THREADED',
          'VERSION_NUMBER_STRING=\\"%s\\"' % version_string,
          ],

      CPPPATH = [
          '$OBJ_ROOT',
          ],

      LIBS = [
          '$LIB_DIR/breakpad.lib',
          '$LIB_DIR/common.lib',
          '$LIB_DIR/goopdate_dll.lib',
          '$LIB_DIR/logging.lib',
          '$LIB_DIR/npOneClick_dll.lib',
          '$LIB_DIR/npOneClick_dll_no_pch.lib',
          '$LIB_DIR/npOneClickPlugin.lib',
          '$LIB_DIR/net.lib',
          '$LIB_DIR/security.lib',
          '$LIB_DIR/statsreport.lib',
          '$LIB_DIR/worker.lib',

          ('atls.lib', 'atlsd.lib')[temp_env.Bit('debug')],
          ('libcmt.lib', 'libcmtd.lib')[temp_env.Bit('debug')],
          ('libcpmt.lib', 'libcpmtd.lib')[temp_env.Bit('debug')],
          'comctl32.lib',
          'crypt32.lib',
          'Iphlpapi.lib',
          'Mstask.lib',
          'Netapi32.lib',
          'psapi.lib',
          'rasapi32.lib',
          'shlwapi.lib',
          'Version.lib',
          'urlmon.lib',
          'userenv.lib',
          'wininet.lib',
          'Wintrust.lib',
          'WtsApi32.lib',
          ],
  )

  resource_res = temp_env.RES(
      target=prefix + 'resource.res',
      source='resource.rc',
  )

  # Force a rebuild when the version changes.
  temp_env.Depends(resource_res,
                   ['$MAIN_DIR/VERSION', '$OBJ_ROOT/plugins/oneclick_idl.tlb'])

  # TODO(Omaha): Remove plugin dependencies on goopdate and all its
  # dependencies.

  target_name = prefix + temp_env['ACTIVEX_UNSIGNED_FILENAME']

  temp_inputs = [
      'dllmain.cc',
      'oneclick.def',
      resource_res,
      ]

  if env.Bit('use_precompiled_headers'):
    pch_obj = temp_env.EnablePrecompile(target_name)

    # Force a rebuild of the precompiled headers when the version changes.
    # This is necessary in this project because VERSION_NUMBER_STRING is added
    # to the CL flags whereas for other projects it is only in the RC flags.
    temp_env.Depends(pch_obj, '$MAIN_DIR/VERSION')

    temp_inputs += [pch_obj]


  unsigned_dll = temp_env.ComponentLibrary(
      lib_name=target_name,
      source=temp_inputs
  )

  signed_dll = temp_env.SignedBinary(
      target=prefix + temp_env['ACTIVEX_FILENAME'],
      source=unsigned_dll,
  )

  env.Replicate('$STAGING_DIR', signed_dll)
  env.Replicate('$STAGING_DIR', [f for f in unsigned_dll if f.suffix == '.pdb'])


#
# Generate oneclick_idl.idl. The output is an IDL file with a variant CLSID
# for coclass GoopdateOneClickControl.
#
generated_idl = env.Command(
    target='oneclick_idl.idl',
    source='$MAIN_DIR/plugins/oneclick_idl.idl',
    action=('python %s/plugins/generate_oneclick_idl.py --idl_template_file '
        '$SOURCE --idl_output_file $TARGET' % env['MAIN_DIR'])
)


#
# Build the type library
#
midl_env = env.Clone()
midl_env.Tool('midl')

midl_env['MIDLFLAGS'] += [
    '/Oicf',  # generate optimized stubless proxy/stub code
    ]

# Create the type library, taking the generated idl file as input
midl_env.TypeLibrary(generated_idl)


#
# Generate the GUIDs with no precompile option set, otherwise we get an error.
#
no_precomp_env = env.Clone()
no_precomp_env.Append(
    CCFLAGS = [
        '/wd4255',  # no function prototype given: converting '()' to '(void)'
        ],
    CPPPATH = [
        '$OBJ_ROOT',  # Needed for generated files
        ],
)

no_precomp_env.ComponentLibrary(
    lib_name='npOneClick_dll_no_pch.lib',
    source='$OBJ_ROOT/plugins/oneclick_idl_i.c',
)


#
# Build npOneClick_dll.lib
#
one_click_env = env.Clone()
one_click_env.Append(
    CCFLAGS = [
        '/wd4946',  # reinterpret_cast used between related classes
        ],
    CPPDEFINES = [
        '_ATL_APARTMENT_THREADED',
        ],
    CPPPATH = [
        '$OBJ_ROOT',  # Needed for generated files
        ],
)

target_name = 'npOneClick_dll.lib'

one_click_inputs = [
    'oneclick.cc',
    'oneclick_browser_callback_activex.cc',
    'oneclick_worker.cc',
    'oneclick_atl_module.cc',
    ]
if env.Bit('use_precompiled_headers'):
  one_click_inputs += one_click_env.EnablePrecompile(target_name)

one_click_env.ComponentLibrary(
    lib_name=target_name,
    source=one_click_inputs,
)


#
# Build npOneClickPlugin.lib
#
ocp_env = env.Clone()
ocp_env['CCFLAGS'] += [
    '/D_X86_',  # needed for NPAPI code to build NT headers properly
    ]

ocp_env.ComponentLibrary(
    lib_name='npOneClickPlugin.lib',
    source=[
        'np_entry.cc',
        'baseplugin.cc',
        'npOneClick.cc',
        'npn_gate.cc',
        'npp_gate.cc',
        'oneclick_browser_callback_npapi.cc',
        ]
)

